# coding: utf-8

"""
    langfuse

    ## Authentication  Authenticate with the API using Basic Auth, get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key

    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from langfuse_python_sdk.pydantic.observation_level import ObservationLevel
from langfuse_python_sdk.pydantic.observation_model_parameters import ObservationModelParameters
from langfuse_python_sdk.pydantic.usage import Usage

class Observation(BaseModel):
    id: str = Field(alias='id')

    type: str = Field(alias='type')

    start_time: datetime = Field(alias='startTime')

    level: ObservationLevel = Field(alias='level')

    version: typing.Optional[typing.Optional[str]] = Field(None, alias='version')

    trace_id: typing.Optional[typing.Optional[str]] = Field(None, alias='traceId')

    name: typing.Optional[typing.Optional[str]] = Field(None, alias='name')

    end_time: typing.Optional[typing.Optional[datetime]] = Field(None, alias='endTime')

    completion_start_time: typing.Optional[typing.Optional[datetime]] = Field(None, alias='completionStartTime')

    model: typing.Optional[typing.Optional[str]] = Field(None, alias='model')

    model_parameters: typing.Optional[ObservationModelParameters] = Field(None, alias='modelParameters')

    input: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='input')

    metadata: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='metadata')

    output: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='output')

    usage: typing.Optional[Usage] = Field(None, alias='usage')

    status_message: typing.Optional[typing.Optional[str]] = Field(None, alias='statusMessage')

    parent_observation_id: typing.Optional[typing.Optional[str]] = Field(None, alias='parentObservationId')

    prompt_id: typing.Optional[typing.Optional[str]] = Field(None, alias='promptId')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
