# coding: utf-8

"""
    langfuse

    ## Authentication  Authenticate with the API using Basic Auth, get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from langfuse_python_sdk import schemas  # noqa: F401


class MapValue(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class one_of_0(
            schemas.StrBase,
            schemas.NoneBase,
            schemas.Schema,
            schemas.NoneStrMixin
        ):
        
        
            def __new__(
                cls,
                *args: typing.Union[None, str, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
            ) -> 'one_of_0':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                )
        
        
        class one_of_1(
            schemas.IntBase,
            schemas.NoneBase,
            schemas.Schema,
            schemas.NoneDecimalMixin
        ):
        
        
            def __new__(
                cls,
                *args: typing.Union[None, decimal.Decimal, int, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
            ) -> 'one_of_1':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                )
        
        
        class one_of_2(
            schemas.BoolBase,
            schemas.NoneBase,
            schemas.Schema,
            schemas.NoneBoolMixin
        ):
        
        
            def __new__(
                cls,
                *args: typing.Union[None, bool, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
            ) -> 'one_of_2':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                )
        
        
        class one_of_3(
            schemas.ListBase,
            schemas.NoneBase,
            schemas.Schema,
            schemas.NoneTupleMixin
        ):
        
        
            class MetaOapg:
                items = schemas.StrSchema
        
        
            def __new__(
                cls,
                *args: typing.Union[list, tuple, None, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
            ) -> 'one_of_3':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                )
        
        @classmethod
        @functools.lru_cache()
        def one_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.one_of_0,
                cls.one_of_1,
                cls.one_of_2,
                cls.one_of_3,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MapValue':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
