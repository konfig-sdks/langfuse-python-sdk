# coding: utf-8

"""
    langfuse

    ## Authentication  Authenticate with the API using Basic Auth, get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from langfuse_python_sdk import schemas  # noqa: F401


class UsageByModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Daily usage of a given model. Usage corresponds to the unit set for the specific model (e.g. tokens).
    """


    class MetaOapg:
        required = {
            "model",
            "totalUsage",
            "inputUsage",
            "outputUsage",
        }
        
        class properties:
            model = schemas.StrSchema
            inputUsage = schemas.IntSchema
            outputUsage = schemas.IntSchema
            totalUsage = schemas.IntSchema
            __annotations__ = {
                "model": model,
                "inputUsage": inputUsage,
                "outputUsage": outputUsage,
                "totalUsage": totalUsage,
            }
    
    model: MetaOapg.properties.model
    totalUsage: MetaOapg.properties.totalUsage
    inputUsage: MetaOapg.properties.inputUsage
    outputUsage: MetaOapg.properties.outputUsage
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inputUsage"]) -> MetaOapg.properties.inputUsage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outputUsage"]) -> MetaOapg.properties.outputUsage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalUsage"]) -> MetaOapg.properties.totalUsage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["model", "inputUsage", "outputUsage", "totalUsage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inputUsage"]) -> MetaOapg.properties.inputUsage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outputUsage"]) -> MetaOapg.properties.outputUsage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalUsage"]) -> MetaOapg.properties.totalUsage: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["model", "inputUsage", "outputUsage", "totalUsage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        model: typing.Union[MetaOapg.properties.model, str, ],
        totalUsage: typing.Union[MetaOapg.properties.totalUsage, decimal.Decimal, int, ],
        inputUsage: typing.Union[MetaOapg.properties.inputUsage, decimal.Decimal, int, ],
        outputUsage: typing.Union[MetaOapg.properties.outputUsage, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UsageByModel':
        return super().__new__(
            cls,
            *args,
            model=model,
            totalUsage=totalUsage,
            inputUsage=inputUsage,
            outputUsage=outputUsage,
            _configuration=_configuration,
            **kwargs,
        )
