# coding: utf-8

"""
    langfuse

    ## Authentication  Authenticate with the API using Basic Auth, get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from langfuse_python_sdk import schemas  # noqa: F401


class DatasetRunItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "createdAt",
            "observationId",
            "datasetRunId",
            "datasetItemId",
            "id",
            "updatedAt",
        }
        
        class properties:
            id = schemas.StrSchema
            datasetRunId = schemas.StrSchema
            datasetItemId = schemas.StrSchema
            observationId = schemas.StrSchema
            createdAt = schemas.DateTimeSchema
            updatedAt = schemas.DateTimeSchema
            __annotations__ = {
                "id": id,
                "datasetRunId": datasetRunId,
                "datasetItemId": datasetItemId,
                "observationId": observationId,
                "createdAt": createdAt,
                "updatedAt": updatedAt,
            }
    
    createdAt: MetaOapg.properties.createdAt
    observationId: MetaOapg.properties.observationId
    datasetRunId: MetaOapg.properties.datasetRunId
    datasetItemId: MetaOapg.properties.datasetItemId
    id: MetaOapg.properties.id
    updatedAt: MetaOapg.properties.updatedAt
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datasetRunId"]) -> MetaOapg.properties.datasetRunId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datasetItemId"]) -> MetaOapg.properties.datasetItemId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["observationId"]) -> MetaOapg.properties.observationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "datasetRunId", "datasetItemId", "observationId", "createdAt", "updatedAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datasetRunId"]) -> MetaOapg.properties.datasetRunId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datasetItemId"]) -> MetaOapg.properties.datasetItemId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["observationId"]) -> MetaOapg.properties.observationId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "datasetRunId", "datasetItemId", "observationId", "createdAt", "updatedAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, ],
        observationId: typing.Union[MetaOapg.properties.observationId, str, ],
        datasetRunId: typing.Union[MetaOapg.properties.datasetRunId, str, ],
        datasetItemId: typing.Union[MetaOapg.properties.datasetItemId, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        updatedAt: typing.Union[MetaOapg.properties.updatedAt, str, datetime, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DatasetRunItem':
        return super().__new__(
            cls,
            *args,
            createdAt=createdAt,
            observationId=observationId,
            datasetRunId=datasetRunId,
            datasetItemId=datasetItemId,
            id=id,
            updatedAt=updatedAt,
            _configuration=_configuration,
            **kwargs,
        )
