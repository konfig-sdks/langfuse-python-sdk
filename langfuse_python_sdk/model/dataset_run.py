# coding: utf-8

"""
    langfuse

    ## Authentication  Authenticate with the API using Basic Auth, get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from langfuse_python_sdk import schemas  # noqa: F401


class DatasetRun(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "createdAt",
            "datasetRunItems",
            "name",
            "datasetId",
            "id",
            "updatedAt",
        }
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            datasetId = schemas.StrSchema
            createdAt = schemas.DateTimeSchema
            updatedAt = schemas.DateTimeSchema
            
            
            class datasetRunItems(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DatasetRunItem']:
                        return DatasetRunItem
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DatasetRunItem'], typing.List['DatasetRunItem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'datasetRunItems':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DatasetRunItem':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "name": name,
                "datasetId": datasetId,
                "createdAt": createdAt,
                "updatedAt": updatedAt,
                "datasetRunItems": datasetRunItems,
            }
    
    createdAt: MetaOapg.properties.createdAt
    datasetRunItems: MetaOapg.properties.datasetRunItems
    name: MetaOapg.properties.name
    datasetId: MetaOapg.properties.datasetId
    id: MetaOapg.properties.id
    updatedAt: MetaOapg.properties.updatedAt
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datasetId"]) -> MetaOapg.properties.datasetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datasetRunItems"]) -> MetaOapg.properties.datasetRunItems: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "datasetId", "createdAt", "updatedAt", "datasetRunItems", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datasetId"]) -> MetaOapg.properties.datasetId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datasetRunItems"]) -> MetaOapg.properties.datasetRunItems: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "datasetId", "createdAt", "updatedAt", "datasetRunItems", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, ],
        datasetRunItems: typing.Union[MetaOapg.properties.datasetRunItems, list, tuple, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        datasetId: typing.Union[MetaOapg.properties.datasetId, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        updatedAt: typing.Union[MetaOapg.properties.updatedAt, str, datetime, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DatasetRun':
        return super().__new__(
            cls,
            *args,
            createdAt=createdAt,
            datasetRunItems=datasetRunItems,
            name=name,
            datasetId=datasetId,
            id=id,
            updatedAt=updatedAt,
            _configuration=_configuration,
            **kwargs,
        )

from langfuse_python_sdk.model.dataset_run_item import DatasetRunItem
