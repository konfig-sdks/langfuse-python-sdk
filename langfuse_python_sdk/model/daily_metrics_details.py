# coding: utf-8

"""
    langfuse

    ## Authentication  Authenticate with the API using Basic Auth, get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from langfuse_python_sdk import schemas  # noqa: F401


class DailyMetricsDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "date",
            "countTraces",
            "usage",
            "totalCost",
        }
        
        class properties:
            date = schemas.StrSchema
            countTraces = schemas.IntSchema
            totalCost = schemas.Float64Schema
            
            
            class usage(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['UsageByModel']:
                        return UsageByModel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['UsageByModel'], typing.List['UsageByModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'usage':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UsageByModel':
                    return super().__getitem__(i)
            __annotations__ = {
                "date": date,
                "countTraces": countTraces,
                "totalCost": totalCost,
                "usage": usage,
            }
    
    date: MetaOapg.properties.date
    countTraces: MetaOapg.properties.countTraces
    usage: MetaOapg.properties.usage
    totalCost: MetaOapg.properties.totalCost
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countTraces"]) -> MetaOapg.properties.countTraces: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalCost"]) -> MetaOapg.properties.totalCost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usage"]) -> MetaOapg.properties.usage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["date", "countTraces", "totalCost", "usage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countTraces"]) -> MetaOapg.properties.countTraces: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalCost"]) -> MetaOapg.properties.totalCost: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usage"]) -> MetaOapg.properties.usage: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date", "countTraces", "totalCost", "usage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date: typing.Union[MetaOapg.properties.date, str, ],
        countTraces: typing.Union[MetaOapg.properties.countTraces, decimal.Decimal, int, ],
        usage: typing.Union[MetaOapg.properties.usage, list, tuple, ],
        totalCost: typing.Union[MetaOapg.properties.totalCost, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DailyMetricsDetails':
        return super().__new__(
            cls,
            *args,
            date=date,
            countTraces=countTraces,
            usage=usage,
            totalCost=totalCost,
            _configuration=_configuration,
            **kwargs,
        )

from langfuse_python_sdk.model.usage_by_model import UsageByModel
